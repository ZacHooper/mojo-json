from lexer import lex

# from parser import parse
from types import AnyJsonType, JSON_SYNTAX, JSON_QUOTE


fn any_json_type_to_string(value: AnyJsonType) raises -> String:
    if value.isa[String]():
        var string_value = value.get[String]()[]
        if len(string_value) == 0:
            return '""'
        elif string_value in JSON_SYNTAX:
            return string_value
        else:
            return '"' + value.get[String]()[] + '"'
    elif value.isa[Int]():
        return str(value.get[Int]()[])
    elif value.isa[Float64]():
        return str(value.get[Float64]()[])
    elif value.isa[Bool]():
        return str(value.get[Bool]()[])
    elif value.isa[NoneType]():
        return "null"
    else:
        raise Error("Unknown type")


fn main() raises:
    var json = """
    {
        "name": "John",
        "age": 30,
        "wage": 25.4,
        "is_student": false,
        "has_job": true,
        "is_null": null,
        "nickname": ""
    }
    """

    var tokens = lex(json)
    for token in range(len(tokens)):
        var token_str = any_json_type_to_string(tokens[token])
        print(token_str, end="")
    # parse(tokens)
